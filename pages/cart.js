import Head from "next/head";
import Image from "next/image";
import Layout from "../components/Layout";
import { urlFor } from "../lib/client";
import { useStore } from "../store/store";
import css from '../styles/Cart.module.css'
import toast, { Toaster } from 'react-hot-toast'
import { useState } from "react";
import OrderModal from "../components/OrderModal";
import { useRouter } from "next/router";

export default function Cart() {

    const router = useRouter()

    const CartData = useStore((state) => state.cart)
    const removePizza = useStore((state) => state.removePizza)
    const [PaymentMethod, setPaymentMethod] = useState(null)
    const [Order, setOrder] = useState(
        typeof window !== 'undefined' && localStorage.getItem('order')
    )

    const handleRemove = (i) => {
        removePizza(i);
        toast.error('Pizza Removed')
    }

    const total = () => CartData.pizzas.reduce((a, b) => a + b.quantity * b.price, 0)

    const handleOnDelivery = () => {
        setPaymentMethod(0);
        typeof window !== 'undefined' && localStorage.setItem('total', total())
    }

    const handleCheckout = async () => {
        typeof window !== 'undefined' && localStorage.setItem('total', total())
        setPaymentMethod(1)
        const response = await fetch('/api/stripe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(CartData.pizzas)
        })

        if (response.status === 500) return

        const data = await response.json()
        toast.loading("Redirecting")

        router.push(data.url)

    }

    return (
        <Layout>
            <div className={css.container}>
                <Head>
                    <title>FUDO</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/Logo.png" />
                </Head>

                <div className={css.details}>
                    <table className={css.table}>
                        <thead>
                            <th>Pizza</th>
                            <th>Name</th>
                            <th>Size</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Total</th>
                            <th></th>
                        </thead>
                        <tbody className={css.tbody}>
                            {CartData.pizzas.length > 0 &&
                                CartData.pizzas.map((pizza, i) => {

                                    const src = urlFor(pizza.image).url()

                                    return (
                                        <tr key={i}>
                                            <td className={css.imageTd} >
                                                <Image loader={() => src} alt='' src={src} objectFit='cover' width={85} height={85} />
                                            </td>
                                            <td>
                                                {pizza.name}
                                            </td>
                                            <td>
                                                {pizza.size === 0 ? 'Small' : pizza.size === 1 ? 'Medium' : 'Large'}
                                            </td>
                                            <td>
                                                {pizza.price}
                                            </td>
                                            <td>
                                                {pizza.quantity}
                                            </td>
                                            <td>
                                                {pizza.price * pizza.quantity}
                                            </td>
                                            <td onClick={() => handleRemove(i)} style={{ color: 'var(--themeRed', cursor: 'pointer' }}>
                                                x
                                            </td>
                                        </tr>
                                    )
                                })
                            }
                        </tbody>
                    </table>
                </div>
                <div className={css.cart}>
                    <span>Cart</span>
                    <div className={css.CartDetails}>
                        <div>
                            <span>Items</span>
                            <span>{CartData.pizzas.length}</span>
                        </div>
                        <div>
                            <span>Total</span>
                            <span> <span style={{ color: 'var(--themeRed)' }}>$</span> {total()}</span>
                        </div>
                    </div>
                    {!Order && CartData.pizzas.length > 0 ? (<div className={css.buttons}>
                        <button className="btn" onClick={handleOnDelivery} >Pay On Delivery</button>
                        <button className="btn" onClick={handleCheckout} >Pay Now</button>
                    </div>) : null}

                </div>
            </div>
            <Toaster />

            <OrderModal setOpened={setPaymentMethod} PaymentMethod={PaymentMethod} opened={PaymentMethod === 0} />
        </Layout >
    )
}